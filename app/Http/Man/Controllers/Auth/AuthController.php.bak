<?php

namespace App\Http\Controllers\Auth;

use App;
use App\User;
use Validator;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Crypt;
use Illuminate\Contracts\Encryption\DecryptException;


class AuthController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Registration & Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users, as well as the
    | authentication of existing users. By default, this controller uses
    | a simple trait to add these behaviors. Why don't you explore it?
    |
    */

//    use AuthenticatesAndRegistersUsers, ThrottlesLogins;

    protected $redirectPath = '/dashboard';
    protected $loginPath = '/login';

    /**
     * Create a new authentication controller instance.
     *
     * @return void
     */
    public function __construct(Guard $auth, Registrar $registrar)
    {
        $this->auth = $auth;
        $this->registrar = $registrar;
        $this->middleware('guest', ['except' => 'getLogout']);
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => 'required|max:255',
            'email' => 'required|email|max:255|unique:users',
            'password' => 'required|confirmed|min:6',
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return User
     */
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => bcrypt($data['password']),
        ]);
    }


    public function getLogin()
    {
        return view('auth.login');
    }


    public function postLogin(Request $request)
    {
        $this->validate($request, [
            'username' => 'required',
            'password' => 'required'
        ]);
        $post = $request->all();
        if ( 
            !$request->is('auth/login') || 
            !$request->isMethod('post') ||
            !$request->has('username') ||
            !$request->has('password')
        ) {
            return view('common.error', [
                'message' => '无效的请求',
                'location' => url('auth/login')
            ]);
        }

        //~ 下面两个方法仅接收需要接收的数据
        /*
        $input = $request->only('username', 'password');
        $input = $request->except('credit_card');
        */
        //~ 获取文件
        // $file = $request->file('photo');
        // $request->hasFile('photo')
        // $request->file('photo')->isValid()
        // $request->file('photo')->move($destinationPath);
        // $request->file('photo')->move($destinationPath, $fileName);
        //~ 更多参考： http://api.symfony.com/2.7/Symfony/Component/HttpFoundation/File/UploadedFile.html


        if ( !$post['username'] || !$post['password'] )
        {
            if ( $request->ajax() )
            {
                return "{code:2001, error:'infomation not completed'}";
            }
            else {
                return view('common.error', [
                    'message' => 'infomation not completed!',
                    'location' => url('auth/login')
                ]);
            }
        }
        else {
            $user = User::find([
                'username' => $post['username'],
                'password' => Crypt::encrypt($post['password'])
            ]);

            return $user;
        }
    }

    /*
    加密类的用法
    */
    public function updatePassword(Request $request, $id)
    {
        $user = User::findOrFail($id);
        $user->fill([
            'secret' => Crypt::encrypt($request->secret)
        ])->save();
    }

    /*
    解密的用法
    */
    public function getDecript($val)
    {
      
        try {
            $decrypted = Crypt::decrypt($encryptedValue);
        } catch (DecryptException $e) {
            //
        }
    }

}
